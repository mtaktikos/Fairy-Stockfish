# Fairy-Stockfish, a UCI chess variant playing engine derived from Stockfish
# Copyright (C) 2018-2022 Fabian Fichter
#
# Fairy-Stockfish is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fairy-Stockfish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a configuration file to add user-defined variants to Fairy-Stockfish.

################################################
### Usage:
# Add "load" and the file path to the SF call (e.g., "stockfish.exe load variants.ini")
# or set the UCI option "VariantPath" to the path of this file in order to load it.
# In order to validate the configuration without actually loading the variants
# run "stockfish.exe check variants.ini", which reports potential config errors.

################################################
### Variant configuration:
# The variant name needs to be specified as a section in square brackets,
# followed by its rule configurations as key-value pairs as described below.
# If you encounter problems configuring variants, please report them at:
# https://github.com/ianfab/Fairy-Stockfish/issues

### Inheritance
# If a variant is similar to a previously defined variant,
# inheritance can be used to simplify the definition. To inherit from the
# configuration of an existing variant, specify the parent variant after the child
# variant name separated by a colon, e.g., [gothic:capablanca].
# When inheritance is used, only the differences to the parent variant need to be defined,
# see the examples in this file, e.g., 3check-crazyhouse.
# When no inheritance is used, the default template applies,
# which is basically standard chess but without any predefined pieces.

### Piece types
# Firstly, the piece types for a variant need to be defined.
# For that, specify the letter used for each piece type, e.g.:
# pawn = p
#
# See the list below for all available predefined piece types (and their Betza notation):
# pawn (fmWfceF)
# knight (N)
# bishop (B)
# rook (R)
# queen (Q)
# fers (F)
# alfil (A)
# fersAlfil (FA)
# silver (FfW)
# aiwok (RNF)
# bers (RF)
# archbishop (BN)
# chancellor (RN)
# amazon (QN)
# knibis (mNcB)
# biskni (mBcN)
# kniroo (mNcR)
# rookni (mRcN)
# shogiPawn (fW)
# lance (fR)
# shogiKnight (fN)
# gold (WfF)
# dragonHorse (BW)
# clobber (cW)
# breakthrough (fmWfF)
# immobile ()
# cannon (mRcpR)
# janggiCannon (pR)
# soldier (fsW)
# horse (nN)
# elephant (nA)
# janggiElephant (nZ)
# banner (RcpRnN)
# wazir (W)
# commoner (K)
# centaur (KN)
# king (K)

### Custom pieces
# Custom pieces can be defined by using one of the available slots:
# customPiece1, customPiece2, ..., customPiece25
# E.g., pawns without double steps could be described as:
# customPiece1 = p:mfWcfF
#
# You can define custom king movements in the same way you can define another custom piece.
# E.g., to make the king move like a centaur:
# king = k:KN
# In constrast to other custom pieces the Betza notation for the king is optional though
# and defaults to a standard chess king (betza: K) when skipped, e.g.:
# king = k
#
# The movements of custom pieces can be defined using the Betza notation.
# https://www.gnu.org/software/xboard/Betza.html
# In Fairy-Stockfish only a subset of Betza notation can be used. The supported features are:
# - all base moves/atoms (W, F, etc.)
# - all directional modifiers (f, b, etc.)
# - limited and unlimited distance sliders/riders for W/R, F/B, and N directions
# - hoppers and grasshoppers for W/R and F/B directions, i.e., pR, pB, gR, and gB
# - lame leapers (n) for N, A, and Z directions, i.e., nN, nA, and nZ

### Piece values
# The predefined and precalculated piece values can be overriden
# by specifying the pieceValueMg and pieceValueEg options, e.g.,
# pieceValueMg = p:150 n:800
# pieceValueEg = p:200 n:900
#
# For orientation, the internal predefined piece values can be found in types.h.
# A suitable piece for gauging the piece values is the rook, which internally has:
# pieceValueMg = r:1276
# pieceValueEg = r:1380

### Option types
# [bool]: boolean flag to enable/disable a feature [true, false]
# [Rank]: denotes a rank of the board [1-10]
# [File]: denotes a file of the board [1-12, a-i]
# [int]: any natural number [0, 1, ...]
# [PieceType]: a piece type [letters defined for pieces, e.g., p]
# [Bitboard]: list of squares [e.g., d4 e4 d5 e5]. * can be used as wildcard for files (e.g., *1 is the first rank)
# [Value]: game result for the side to move [win, loss, draw]
# [MaterialCounting]: material couting rules for adjudication [janggi, unweighted, whitedrawodds, blackdrawodds, none]
# [CountingRule]: makruk, cambodian, or ASEAN counting rules [makruk, cambodian, asean, none]
# [ChasingRule]: xiangqi chasing rules [axf, none]
# [EnclosingRule]: reversi or ataxx enclosing rules [reversi, ataxx, none]

### Additional options relevant for usage in Winboard/XBoard
# A few options only have the purpose of improving compatibility with Winboard/Xboard.
# These do not need to be specified when using other GUIs, but can be essential for Winboard/Xboard.
#
# variantTemplate: base variant to inherit GUI logic from [values: fairy, shogi, bughouse] (default: fairy)
# pieceToCharTable: mapping of piece characters to images,
#                   see https://www.gnu.org/software/xboard/whats_new/4.9.0/index.html#tag-B1 (default: -)
# pocketSize: number of pockets shown by XBoard/WinBoard for drop variants [int] (default: 0)

### Rule definition options
# maxRank: maximum rank [Rank] (default: 8)
# maxFile: maximum file [File] (default: 8)
# chess960: allow chess960 castling [bool] (default: false)
# twoBoards: the game is influenced by a second board (e.g., bughouse) [bool] (default: false)
# startFen: FEN of starting position (default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1)
# mobilityRegion: the mobility area can be defined via options specific to color and piece,
#                 .e.g., mobilityRegionWhiteRook, mobilityRegionBlackJanggiElephant, etc. [Bitboard]
# promotionRegionWhite: region where promotions are allowed for white [Bitboard] (default: *8)
# promotionRegionBlack: region where promotions are allowed for black [Bitboard] (default: *1)
# promotionPawnType: promotion pawn type [PieceType] (default: p)
# promotionPawnTypeWhite: white promotion pawn type [PieceType] (default: p)
# promotionPawnTypeBlack: black promotion pawn type [PieceType] (default: p)
# promotionPieceTypes: pawn promotion options using their one-letter representations (default: nbrq)
# promotionPieceTypesWhite: white pawn promotion options using their one-letter representations (default: nbrq)
# promotionPieceTypesBlack: black pawn promotion options using their one-letter representations (default: nbrq)
# sittuyinPromotion: enable Sittuyin-style pawn promotion [bool] (default: false)
# promotionLimit: maximum number of pieces of a type, e.g., q:1 r:2 (default: )
# promotedPieceType: mapping between unpromoted and promoted non-pawn piece types, e.g., p:g s:g (default: )
# piecePromotionOnCapture: piece promotion only allowed on captures (e.g., micro shogi) [bool] (default: false)
# mandatoryPawnPromotion: pawn promotion is mandatory [bool] (default: true)
# mandatoryPiecePromotion: piece promotion (and demotion if enabled) is mandatory [bool] (default: false)
# pieceDemotion: enable demotion of pieces (e.g., Kyoto shogi) [bool] (default: false)
# blastOnCapture: captures explode all adjacent non-pawn pieces (e.g., atomic chess) [bool] (default: false)
# petrifyOnCapture: non-pawn pieces are turned into wall squares when capturing [bool] (default: false)
# doubleStep: enable pawn double step [bool] (default: true)
# doubleStepRegionWhite: region where pawn double steps are allowed for white [Bitboard] (default: *2)
# doubleStepRegionBlack: region where pawn double steps are allowed for black [Bitboard] (default: *2)
# tripleStepRegionWhite: region where pawn triple steps are allowed for white [Bitboard] (default: -)
# tripleStepRegionBlack: region where pawn triple steps are allowed for black [Bitboard] (default: -)
# enPassantRegion: define region (target squares) where en passant is allowed after double steps [Bitboard]
# castling: enable castling [bool] (default: true)
# castlingDroppedPiece: enable castling with dropped rooks/kings [bool] (default: false)
# castlingKingsideFile: destination file of king after kingside castling [File] (default: g)
# castlingQueensideFile: destination file of king after queenside castling [File] (default: c)
# castlingRank: relative rank of castling [Rank] (default: 1)
# castlingKingFile: starting file of the castlingKingPiece if there can be more than one of that type [File] (default: e)
# castlingKingPiece: first piece type that participates in castling [PieceType] (default: k)
# castlingRookPiece: second piece type that participates in castling [PieceType] (default: r)
# checking: allow checks [bool] (default: true)
# dropChecks: allow checks by piece drops [bool] (default: true)
# mustCapture: captures are mandatory (check evasion still takes precedence) [bool] (default: false)
# mustDrop: drops are mandatory (e.g., for Sittuyin setup phase) [bool] (default: false)
# mustDropType: piece type for which piece drops are mandatory [PieceType] (default: *)
# pieceDrops: enable piece drops [bool] (default: false)
# dropLoop: captures promoted pieces are not demoted [bool] (default: false)
# capturesToHand: captured pieces are go to opponent's hand [bool] (default: false)
# firstRankPawnDrops: allow pawn drops to first rank [bool] (default: false)
# promotionZonePawnDrops: allow pawn drops in promotion zone  [bool] (default: false)
# dropOnTop: piece drops need to be on top of pieces on board (e.g., for connect4) [bool] (default: false)
# enclosingDrop: require piece drop to enclose pieces [EnclosingRule] (default: none)
# enclosingDropStart: drop region for starting phase disregarding enclosingDrop (e.g., for reversi) [Bitboard]
# whiteDropRegion: restrict region for piece drops of all white pieces [Bitboard]
# blackDropRegion: restrict region for piece drops of all black pieces [Bitboard]
# sittuyinRookDrop: restrict region of rook drops to first rank [bool] (default: false)
# dropOppositeColoredBishop: dropped bishops have to be on opposite-colored squares [bool] (default: false)
# dropPromoted: pieces may be dropped in promoted state [bool] (default: false)
# dropNoDoubled: specified piece type can not be dropped to the same file (e.g. shogi pawn) [PieceType] (default: -)
# dropNoDoubledCount: specifies the count of already existing pieces for dropNoDoubled [int] (default: 1)
# immobilityIllegal: pieces may not move to squares where they can never move from [bool] (default: false)
# gating: maintain squares on backrank with extra rights in castling field of FEN [bool] (default: false)
# arrowGating: gating of wall squares in Game of the Amazons style [bool] (default: false)
# duckGating: gating of a wall square in Duck chess style [bool] (default: false)
# staticGating: gating of wall squares in Isolation style [bool] (default: false)
# staticGatingRegion: mask where wall squares can be placed [Bitboard] (default: all squares)
# pastGating: gating of previous square [bool] (default: false)
# seirawanGating: allow gating of pieces in hand like in S-Chess, requires "gating = true" [bool] (default: false)
# cambodianMoves: enable special moves of cambodian chess, requires "gating = true" [bool] (default: false)
# diagonalLines: enable special moves along diagonal for specific squares (Janggi) [Bitboard]
# pass: allow passing [bool] (default: false)
# passOnStalemate: allow passing in case of stalemate [bool] (default: false)
# makpongRule: the king may not move away from check [bool] (default: false)
# flyingGeneral: disallow general face-off like in xiangqi [bool] (default: false)
# soldierPromotionRank: restrict soldier to shogi pawn movements until reaching n-th rank [bool] (default: 1)
# flipEnclosedPieces: change color of pieces that are enclosed by a drop [EnclosingRule] (default: none)
# nMoveRule: move count for 50/n-move rule [int] (default: 50)
# nFoldRule: move count for 3/n-fold repetition rule [int] (default: 3)
# nFoldValue: result in case of 3/n-fold repetition [Value] (default: draw)
# nFoldValueAbsolute: result in case of 3/n-fold repetition is from white's point of view [bool] (default: false)
# perpetualCheckIllegal: prohibit perpetual checks [bool] (default: false)
# moveRepetitionIllegal: prohibit moving back and forth with the same piece nFoldRule-1 times [bool] (default: false)
# chasingRule: enable chasing rules [ChasingRule] (default: none)
# stalemateValue: result in case of stalemate [Value] (default: draw)
# stalematePieceCount: count material in case of stalemate [bool] (default: false)
# checkmateValue: result in case of checkmate [Value] (default: loss)
# shogiPawnDropMateIllegal: prohibit checkmate via shogi pawn drops [bool] (default: false)
# shatarMateRule: enable shatar mating rules [bool] (default: false)
# bikjangRule: consider Janggi bikjang (facing kings) rule [bool] (default: false)
# extinctionValue: result when one of extinctionPieceTypes is extinct [Value] (default: none)
# extinctionClaim: extinction of opponent pieces can only be claimed as side to move [bool] (default: false)
# extinctionPseudoRoyal: treat the last extinction piece like a royal piece [bool] (default: false)
# extinctionPieceTypes: list of piece types for extinction rules, e.g., pnbrq (* means all) (default: )
# extinctionPieceCount: piece count at which the game is decided by extinction rule (default: 0)
# extinctionOpponentPieceCount: opponent piece count required to adjudicate by extinction rule (default: 0)
# flagPiece: piece type for capture the flag win rule [PieceType] (default: -)
# flagRegionWhite: white's target region for capture the flag win rule [Bitboard] (default: )
# flagRegionBlack: black's target region for capture the flag win rule [Bitboard] (default: )
# flagMove: black gets one more move after white captures the flag [bool] (default: false)
# checkCounting: enable check count win rule (check count is communicated via FEN, see 3check) [bool] (default: false)
# connectN: number of aligned pieces for win [int] (default: 0)
# materialCounting: enable material counting rules [MaterialCounting] (default: none)
# countingRule: enable counting rules [CountingRule] (default: none)

################################################
### Example for minishogi configuration that would be equivalent to the built-in variant:

# [minishogi]
# variantTemplate = shogi
# maxRank = 5
# maxFile = 5
# shogiPawn = p
# silver = s
# gold = g
# bishop = b
# dragonHorse = h
# rook = r
# bers = d
# king = k
# startFen = rbsgk/4p/5/P4/KGSBR[-] w 0 1
# pieceDrops = true
# capturesToHand = true
# promotionRegionWhite = *5
# promotionRegionBlack = *1
# doubleStep = false
# castling = false
# promotedPieceType = p:g s:g b:h r:d
# dropNoDoubled = p
# immobilityIllegal = true
# shogiPawnDropMateIllegal = true
# stalemateValue = loss
# nFoldRule = 4
# nMoveRule = 0
# perpetualCheckIllegal = true
# pocketSize = 5
# nFoldValue = loss
# nFoldValueAbsolute = true
 
 # Copyright (c) 2012 Itsubaki Yoshihisa 
 # https://glukkazan.github.io/shogi/simple-shogi.htm
[simpleshogi:minishogi]
maxRank = 5
maxFile = 3
startFen = 1k1/1p1/3/1P1/1K1[sgSG] w - - 0 1
promotionRegionWhite = *5
promotionRegionBlack = *1
dropNoDoubled = -
nFoldValue = draw
perpetualCheckIllegal = false

# Copyright (c) 2010 Yamamoto Mitsuo 
# https://glukkazan.github.io/shogi/treasure-shogi.htm
[treasureshogi:minishogi]
lance = l
shogiKnight = n
maxRank = 5
maxFile = 3
startFen = skg/3/3/3/GKS[nlNL] w - - 0 1
promotionRegionWhite = *4 *5
promotionRegionBlack = *1 *2
promotedPieceType = p:g s:g l:g n:g
dropNoDoubled = -
nFoldValue = draw
perpetualCheckIllegal = false

# REN Shogi classic, no mandatory promotion
[renshogi:minishogi]
maxRank = 7
maxFile = 3
startFen = skg/r1b/ppp/3/PPP/B1R/GKS[-] w - - 0 1
promotionRegionWhite = *5 *6 *7
promotionRegionBlack = *1 *2 *3
dropNoDoubled = p
nFoldValue = draw
perpetualCheckIllegal = false

# REN Shogi with mandatory promotion
# https://glukkazan.github.io/shogi/ren-shogi.htm
[rendagaz:minishogi]
maxRank = 7
maxFile = 3
startFen = skg/r1b/ppp/3/PPP/B1R/GKS[-] w - - 0 1
promotionRegionWhite = *5 *6 *7
promotionRegionBlack = *1 *2 *3
mandatoryPiecePromotion = true
dropNoDoubled = p
nFoldValue = draw
perpetualCheckIllegal = false

# Copyright (c) 2009 Yamamoto Mitsuo
# https://www.zillions-of-games.com/cgi-bin/zilligames/submissions.cgi?do=show;id=2874
# The version in https://glukkazan.github.io/shogi/leshogi.htm is in the Zillions file the variant True LeShogi classic
[leshogi:minishogi]
lance = l
shogiKnight = n
maxRank = 6
maxFile = 4
startFen = skgl/prbn/4/4/NBRP/LGKS[-] w - - 0 1
promotionRegionWhite = *6 *5
promotionRegionBlack = *1 *2
promotedPieceType = p:g s:g l:g n:g
dropNoDoubled = -
nFoldValue = draw
perpetualCheckIllegal = false

# Copyright (c) 2012 Itsubaki Yoshihisa 
# https://glukkazan.github.io/shogi/rocket-shogi.htm
[rocketshogi:minishogi]
lance = l
shogiKnight = n
maxRank = 7
maxFile = 5
startFen = nrkbn/1g1s1/2l2/5/2L2/1S1G1/NBKRN[-] w - - 0 1
promotionRegionWhite = *5 *6 *7
promotionRegionBlack = *1 *2 *3
promotedPieceType = p:g s:g l:g n:g
dropNoDoubled = -
nFoldValue = draw
perpetualCheckIllegal = false

# Kyoto Shogi startposition mirrored to FSF Kyotoshogi
# https://glukkazan.github.io/shogi/kyoto-shogi.htm
[kyotodagaz:kyotoshogi]
startFen =  +lsk+np/5/5/5/P+NKS+L[] w 0 1

# Pandemonium
# A variant that combines drops and powerful pieces, and there is no draw
# https://www.chessvariants.com/rules/pandemonium
[pandemonium]
variantTemplate = shogi
pieceToCharTable = PNBRFSA.UV.+++++++.++Kpnbrfsa.uv.+++++++.++k
maxFile = 9
maxRank = 9
pocketSize = 9
startFen = rnbsksbnr/2a1f1u2/p1p1p1p1p/4v4/9/4V4/P1P1P1P1P/2U1F1A2/RNBSKSBNR[] w - - 0 1
customPiece1 = o:NA
customPiece2 = s:WF
customPiece3 = u:D
customPiece4 = w:DWF
castling = false
pieceDrops = true
capturesToHand = true
immobilityIllegal = true
soldier = p
knight = n
bishop = b
rook = r
king = k
queen = q
commoner = g
dragonHorse = h
bers = d
alfil = a
archbishop = c
chancellor = m
fers = f
wazir = v
centaur = t
promotionRegionWhite = *7 *8 *9
promotionRegionBlack = *3 *2 *1
promotedPieceType = p:g n:o b:h r:d a:c v:m f:q s:w u:t
doubleStep = false
perpetualCheckIllegal = true
nMoveRule = 0
nFoldValue = loss
stalemateValue = loss
flagPiece = k
flagRegionWhite = *9
flagRegionBlack = *1

# Mansindam (Pantheon tale)
# A variant that combines drop rule and powerful pieces, and there is no draw
[mansindam]
variantTemplate = shogi
pieceToCharTable = PNBR.Q.CMA.++++...++Kpnbr.q.cma.++++...++k
maxFile = 9
maxRank = 9
pocketSize = 8
startFen = rnbakqcnm/9/ppppppppp/9/9/9/PPPPPPPPP/9/MNCQKABNR[] w - - 0 1
pieceDrops = true
capturesToHand = true
shogiPawn = p
knight = n
bishop = b
rook = r
queen = q
archbishop = c
chancellor = m
amazon = a
king = k
commoner = g
centaur = e
dragonHorse = h
bers = t
customPiece1 = i:BNW
customPiece2 = s:RNF
promotionRegionWhite = *7 *8 *9
promotionRegionBlack = *3 *2 *1
doubleStep = false
castling = false
promotedPieceType = p:g n:e b:h r:t c:i m:s
dropNoDoubled = p
stalemateValue = loss
nMoveRule = 0
nFoldValue = loss
flagPiece = k
flagRegionWhite = *9
flagRegionBlack = *1
immobilityIllegal = true
mandatoryPiecePromotion = true

